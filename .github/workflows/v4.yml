# This workflow will do a clean install of node and go dependencies, and run the CI scripts

name: Peer Calls CI

on:
  push:
    branches: '*'
    tags:
      - v4*
  pull_request:
    branches: [master]

jobs:
  nodejs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["12.x"]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run ci
    - name: Upload client-side artifacts
      uses: actions/upload-artifact@v1
      with:
        name: build
        path: build
  go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.14"]
    services:
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
    - uses: actions/checkout@v2
    - name: Use Go ${{ matrix.go-version }}
      uses: actions/setup-go@v2.0.3
      with:
        go-version: ${{ matrix.go-version }}
    - run: go test ./... -race -coverprofile=coverage.out -v
    - run: go tool cover -func=coverage.out
  build:
    runs-on: ubuntu-latest
    needs:
      - nodejs
      - go
    strategy:
      matrix:
        go-version: ["1.14"]
    steps:
    - name: Use Go ${{ matrix.go-version }}
      uses: actions/setup-go@v2.0.3
      with:
        go-version: ${{ matrix.go-version }}
    - run: go get -u github.com/gobuffalo/packr/packr
    - uses: actions/checkout@v2
    - name: Download client-side artifacts
      uses: actions/download-artifact@v1
      with:
        name: build
    - run: find build/
    - run: mkdir -p build/release
    - run: echo "::set-env name=git_describe::$(git describe --always --tags)"
    - run: echo $git_describe
    - run: export GOOS=linux GOARCH=amd64; packr build -ldflags "-X main.gitDescribe=$git_describe" -o build/release/peercalls.$GOOS.$GOARCH main.go
    - run: export GOOS=linux GOARCH=arm; packr build -ldflags "-X main.gitDescribe=$git_describe" -o build/release/peercalls.$GOOS.$GOARCH main.go
    - run: export GOOS=darwin GOARCH=amd64; packr build -ldflags "-X main.gitDescribe=$git_describe" -o build/release/peercalls.$GOOS.$GOARCH main.go
    - run: export GOOS=windows GOARCH=amd64; packr build -ldflags "-X main.gitDescribe=$git_describe" -o build/release/peercalls.$GOOS.$GOARCH.exe main.go
    - name: Release
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -xeu
        sha7=${GITHUB_SHA:7}
        assets=()
        cd build/release
        for asset in ./*; do
          archive=$asset.$git_describe.tar.gz
          tar czvf $archive $asset
          assets+=("-a" "$archive")
        done
        args=()
        if [[ $git_describe =~ alpha|beta ]]; then
          args+=("--prerelease")
        fi
        hub release create "${args[@]}" "${assets[@]}" -t $GITHUB_SHA -m "PeerCalls $git_describe" "$git_describe"
